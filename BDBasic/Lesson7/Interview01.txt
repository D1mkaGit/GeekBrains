CREATE SCHEMA `social_network` ;

CREATE TABLE `social_network`.`users` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`));

CREATE TABLE `social_network`.`items` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `item` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`));

CREATE TABLE `social_network`.`user_items` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `user_id` INT NOT NULL,
  `action_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `idx_users_idx` (`user_id` ASC) VISIBLE,
  INDEX `idx_items_idx` (`action_id` ASC) VISIBLE,
  CONSTRAINT `idx_users`
    FOREIGN KEY (`user_id`)
    REFERENCES `social_network`.`users` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `idx_items`
    FOREIGN KEY (`action_id`)
    REFERENCES `social_network`.`items` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION);


INSERT INTO `social_network`.`items` (`id`, `item`) VALUES ('1', 'profile');

CREATE TABLE `social_network`.`actions` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `action` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`));

INSERT INTO `social_network`.`actions` (`id`, `action`) VALUES ('1', 'like');

CREATE TABLE `social_network`.`user_actions` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `user_id` INT NOT NULL,
  `action_id` INT NOT NULL,
  `target_user_item_id` INT NOT NULL,
  PRIMARY KEY (`id`));

ALTER TABLE `social_network`.`user_actions` 
ADD INDEX `idx_user_id_idx` (`user_id` ASC) VISIBLE,
ADD INDEX `idx_action_id_idx` (`action_id` ASC) VISIBLE,
ADD INDEX `idx_target_user_item_id_idx` (`target_user_item_id` ASC) VISIBLE;
;
ALTER TABLE `social_network`.`user_actions` 
ADD CONSTRAINT `idx_user_id`
  FOREIGN KEY (`user_id`)
  REFERENCES `social_network`.`users` (`id`)
  ON DELETE CASCADE
  ON UPDATE NO ACTION,
ADD CONSTRAINT `idx_action_id`
  FOREIGN KEY (`action_id`)
  REFERENCES `social_network`.`actions` (`id`)
  ON DELETE CASCADE
  ON UPDATE NO ACTION,
ADD CONSTRAINT `idx_target_user_item_id`
  FOREIGN KEY (`target_user_item_id`)
  REFERENCES `social_network`.`user_items` (`id`)
  ON DELETE CASCADE
  ON UPDATE NO ACTION;


-- добавляем юзеров
INSERT INTO `social_network`.`users` (`name`) VALUES ('A');
INSERT INTO `social_network`.`users` (`name`) VALUES ('B');
INSERT INTO `social_network`.`users` (`name`) VALUES ('C');

-- добавляем им профайлы (абстрактные, без данных)
INSERT INTO `social_network`.`user_items` (`user_id`, `item_id`) VALUES ('1', '1');
INSERT INTO `social_network`.`user_items` (`user_id`, `item_id`) VALUES ('2', '1');
INSERT INTO `social_network`.`user_items` (`user_id`, `item_id`) VALUES ('3', '1');

-- взаимные лайки профайлов, между двумя пользователями (А и B)
INSERT INTO `social_network`.`user_actions` (`user_id`, `action_id`, `target_user_item_id`) VALUES ('1', '1', '2');
INSERT INTO `social_network`.`user_actions` (`user_id`, `action_id`, `target_user_item_id`) VALUES ('2', '1', '1');

-- безответные лайки пользователя двум другим
INSERT INTO `social_network`.`user_actions` (`user_id`, `action_id`, `target_user_item_id`) VALUES ('3', '1', '1');
INSERT INTO `social_network`.`user_actions` (`user_id`, `action_id`, `target_user_item_id`) VALUES ('3', '1', '2');

SELECT DISTINCT
    u.id AS userID,
    u.name AS userName,
    (SELECT 
            COUNT(*)
        FROM
            social_network.user_actions
        WHERE
            action_id = 1
                AND target_user_item_id = (SELECT 
                    id
                FROM
                    social_network.user_items
                WHERE
                    user_id = userID)) AS gainedLikes,
    (SELECT 
            COUNT(*)
        FROM
            social_network.user_actions
        WHERE
            action_id = 1 AND user_id = userID) AS setLikes,
    (SELECT 
            COUNT(*)
        FROM
            social_network.user_actions AS g_l
                JOIN
            social_network.user_actions AS s_l ON g_l.target_user_item_id = (SELECT 
                    id
                FROM
                    social_network.user_items
                WHERE
                    user_id = s_l.user_id)
                AND s_l.target_user_item_id = (SELECT 
                    id
                FROM
                    social_network.user_items
                WHERE
                    user_id = g_l.user_id)
        WHERE
            g_l.action_id = 1
                AND g_l.user_id = userID) AS mutualLikes
FROM
    social_network.users AS u;

